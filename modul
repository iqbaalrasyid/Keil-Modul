/* USER CODE BEGIN Header */
/**
  **************************
  * @file           : main.c
  * @brief          : Main program body
  **************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  **************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "stdlib.h"
#include <string.h> // for memset
#include "stdbool.h"
#include "math.h"
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
char text [99];
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */


int PWManalog = 512; 						//Maju Mundur ANALOG
int PWMarah = 512;							//Maju Mundur ARROW
int PWMBelok = 500;							//PWM Belok
int PWMRotasi = 300;						//PWM Rotasi Poros
//int encgripsiapA = 5400; 				//Titik Awal / Bawah ENC Gripsiap . 5400
//int encgripsiapB = 5452; 				//Titik Akhir / Atas ENC Gripsiap . 5452 . range aman A + 52
int nospjg = 150;								//Waktu Nos TOUCH Panjang
int nospdk = 80;								//Waktu Nos OPTION Pendek
int nosrotauto = 320;						//Waktu TOUCH Rotasi
//int encgripnaikA = 10000;        //Titik Awal / Bawah ENC Gripnaik . 6000 (Rkiri)
//int encgripnaikB = 10052;        //Titik Akhir / Atas ENC Gripnaik . 6052 (Rkiri) . range aman A + 52
	

//---------------------------------------------------------

int x;
int Stick=0;
char stickNull[19];
int horun = 0;
int timer;
int timerbtn;
int kondisidelay = 0;
int verna = 0;
int verti = 0;
int hori = 0;
int nos = 0;
int e = 0;
int stop = 0;
int aman = 0;
int ambilkoin = 0;
int nosrot = 0;

//stick
int atas,kanan,kiri,bawah,segitiga,bulat,kotak,silang;
int Lnaik,Lturun,Lnkanan,Lnkiri,Ltkanan,Ltkiri,Lkanan,Lkiri,Rnaik,Rturun,Rnkanan,Rnkiri,Rtkanan,Rtkiri,Rkanan,Rkiri;
int L1,R1,L2,R2,R3,L3,select,start,share,option,touch;
char stick[19];
bool stickVerified = false;

//gerak motor
float coss, degcos, sinn, degsin, hasil_cos, hasil_sin, akar, hasil_akar, jarijari,data, dataset, data1, data6, data7, data8, dataset1, data2, dataset2, data3, dataset3, data4, dataset4, data5, dataset5;
float v1, v2, v3, v4, v5, v6, v7, v8, syarat1, syarat2, syarat3, syarat4;
int kecepatan_motor1,kecepatan_motor2,kecepatan_motor3,kecepatan_motor4;
int kondisigrip, kondisiputar; //kondisi gripper
int lama, waktu;
int PWML2;
int PWMR2;
int LimitRotasi = 0;


//Baca Stick 
void serial_stick()
	{
		stickVerified = false;
		
		HAL_UART_Receive_DMA(&huart2,(uint8_t*)stick,19);  ///WAJIB PAKAI DMA DI RECIVE nya 
		if(stick[0] == '*' && stick[18] == 'n')
		{
			stickVerified = true; 
		}
	
		//HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t*)stick,10);
		//HAL_UART_Receive_IT(&huart2, (uint8_t*)stick,3);
		//HAL_UART_Receive(&huart2, (uint8_t*)stick,sizeof(stick),10);
		//Stick = atof(stick);
		
	}
	
//Serial Stick Baru
void baca_stick(){
  serial_stick();
	
	if(stickVerified){
		
		PWML2 = ((((int)stick[10] - 48) * 1000) + (((int)stick[11] - 48) * 100) + (((int)stick[12] - 48) * 10) + ((int)stick[13] - 48) - LimitRotasi);
		PWMR2 = ((((int)stick[14] - 48) * 1000) + (((int)stick[15] - 48) * 100) + (((int)stick[16] - 48) * 10) + ((int)stick[17] - 48) - LimitRotasi);   
			
		     if (stick[2] == '1'){ segitiga = 1; bulat = 0; silang = 0; kotak = 0;}
		else if (stick[2] == '2'){ segitiga = 0; bulat = 1; silang = 0; kotak = 0;}
		else if (stick[2] == '3'){ segitiga = 0; bulat = 0; silang = 1; kotak = 0;}
		else if (stick[2] == '4'){ segitiga = 0; bulat = 0; silang = 0; kotak = 1;}
		else if (stick[2] == '9'){ segitiga = 0; bulat = 0; silang = 0; kotak = 0;}
		
		     if (stick[6] == '1'){ atas = 1; kanan = 0; kiri = 0; bawah = 0;}
		else if (stick[6] == '2'){ atas = 0; kanan = 1; kiri = 0; bawah = 0;}
		else if (stick[6] == '3'){ atas = 0; kanan = 0; kiri = 1; bawah = 0;}
		else if (stick[6] == '4'){ atas = 0; kanan = 0; kiri = 0; bawah = 1;}
		else if (stick[6] == '9'){ atas = 0; kanan = 0; kiri = 0; bawah = 0;}
		
		     if (stick[3] == '1'){ L1 = 1; L2 = 0;}
		else if (stick[3] == '2'){ L1 = 0; L2 = 1;}
		else if (stick[3] == '9'){ L1 = 0; L2 = 0;}
		
		     if (stick[4] == '1'){ R1 = 1; R2 = 0;}
		else if (stick[4] == '2'){ R1 = 0; R2 = 1;}
		else if (stick[4] == '9'){ R1 = 0; R2 = 0;}
		
		     if (stick[5] == '1'){ option = 1; share = 0; touch = 0;}
		else if (stick[5] == '2'){ option = 0; share = 1; touch = 0;}
		else if (stick[5] == '3'){ option = 0; share = 0; touch = 1;}
		else if (stick[5] == '9'){ option = 0; share = 0; touch = 0;}
		
		     if (stick[1] == '1'){ Lnaik = 1; Lturun = 0; Lkanan = 0; Lkiri = 0; Lnkanan = 0; Lnkiri = 0; Ltkanan = 0; Ltkiri = 0;}
		else if (stick[1] == '2'){ Lnaik = 0; Lturun = 1; Lkanan = 0; Lkiri = 0; Lnkanan = 0; Lnkiri = 0; Ltkanan = 0; Ltkiri = 0;}
		else if (stick[1] == '3'){ Lnaik = 0; Lturun = 0; Lkanan = 1; Lkiri = 0; Lnkanan = 0; Lnkiri = 0; Ltkanan = 0; Ltkiri = 0;}
		else if (stick[1] == '4'){ Lnaik = 0; Lturun = 0; Lkanan = 0; Lkiri = 1; Lnkanan = 0; Lnkiri = 0; Ltkanan = 0; Ltkiri = 0;}
		else if (stick[1] == '5'){ Lnaik = 0; Lturun = 0; Lkanan = 0; Lkiri = 0; Lnkanan = 1; Lnkiri = 0; Ltkanan = 0; Ltkiri = 0;}
		else if (stick[1] == '6'){ Lnaik = 0; Lturun = 0; Lkanan = 0; Lkiri = 0; Lnkanan = 0; Lnkiri = 0; Ltkanan = 1; Ltkiri = 0;}
		else if (stick[1] == '7'){ Lnaik = 0; Lturun = 0; Lkanan = 0; Lkiri = 0; Lnkanan = 0; Lnkiri = 1; Ltkanan = 0; Ltkiri = 0;}
		else if (stick[1] == '8'){ Lnaik = 0; Lturun = 0; Lkanan = 0; Lkiri = 0; Lnkanan = 0; Lnkiri = 0; Ltkanan = 0; Ltkiri = 1;}
		else if (stick[1] == '9'){ Lnaik = 0; Lturun = 0; Lkanan = 0; Lkiri = 0; Lnkanan = 0; Lnkiri = 0; Ltkanan = 0; Ltkiri = 0;}
		
		     if (stick[7] == '1'){ Rnaik = 1; Rturun = 0; Rkanan = 0; Rkiri = 0; Rnkanan = 0; Rnkiri = 0; Rtkanan = 0; Rtkiri = 0;}
		else if (stick[7] == '2'){ Rnaik = 0; Rturun = 1; Rkanan = 0; Rkiri = 0; Rnkanan = 0; Rnkiri = 0; Rtkanan = 0; Rtkiri = 0;}
		else if (stick[7] == '3'){ Rnaik = 0; Rturun = 0; Rkanan = 1; Rkiri = 0; Rnkanan = 0; Rnkiri = 0; Rtkanan = 0; Rtkiri = 0;}
		else if (stick[7] == '4'){ Rnaik = 0; Rturun = 0; Rkanan = 0; Rkiri = 1; Rnkanan = 0; Rnkiri = 0; Rtkanan = 0; Rtkiri = 0;}
		else if (stick[7] == '5'){ Rnaik = 0; Rturun = 0; Rkanan = 0; Rkiri = 0; Rnkanan = 1; Rnkiri = 0; Rtkanan = 0; Rtkiri = 0;}
		else if (stick[7] == '6'){ Rnaik = 0; Rturun = 0; Rkanan = 0; Rkiri = 0; Rnkanan = 0; Rnkiri = 0; Rtkanan = 1; Rtkiri = 0;}
		else if (stick[7] == '7'){ Rnaik = 0; Rturun = 0; Rkanan = 0; Rkiri = 0; Rnkanan = 0; Rnkiri = 1; Rtkanan = 0; Rtkiri = 0;}
		else if (stick[7] == '8'){ Rnaik = 0; Rturun = 0; Rkanan = 0; Rkiri = 0; Rnkanan = 0; Rnkiri = 0; Rtkanan = 0; Rtkiri = 1;}
		else if (stick[7] == '9'){ Rnaik = 0; Rturun = 0; Rkanan = 0; Rkiri = 0; Rnkanan = 0; Rnkiri = 0; Rtkanan = 0; Rtkiri = 0;}
	}
}

///// -----------------------  MOTOR  --------------------//////

void drive_motor(int pwm1,int pwm2,int pwm3,int pwm4){
	
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //pwm1

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	//pwm2

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);	//pwm3
	 
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	//pwm4
	
//-----------------PWM 1	
	if(pwm1>0){
	htim3.Instance->CCR2=pwm1;
		HAL_GPIO_WritePin(Motor1A_GPIO_Port, Motor1A_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(Motor1B_GPIO_Port, Motor1B_Pin,GPIO_PIN_RESET);
	}
	else if(pwm1<0){
	htim3.Instance->CCR2=-pwm1;
		HAL_GPIO_WritePin(Motor1A_GPIO_Port, Motor1A_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Motor1B_GPIO_Port, Motor1B_Pin,GPIO_PIN_SET);
	}
	else if(pwm1==0){
	htim3.Instance->CCR2=pwm1;
		HAL_GPIO_WritePin(Motor1A_GPIO_Port, Motor1A_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Motor1B_GPIO_Port, Motor1B_Pin,GPIO_PIN_RESET);
	}
//----------------PWM 2	
	if(pwm2>0){
	htim3.Instance->CCR3=pwm2;
		HAL_GPIO_WritePin(Motor2A_GPIO_Port, Motor2A_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(Motor2B_GPIO_Port, Motor2B_Pin,GPIO_PIN_RESET);
	}
	else if(pwm2<0){
	htim3.Instance->CCR3=-pwm2;
		HAL_GPIO_WritePin(Motor2A_GPIO_Port, Motor2A_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Motor2B_GPIO_Port, Motor2B_Pin,GPIO_PIN_SET);
	}
	else if(pwm2==0){
	htim3.Instance->CCR3=pwm2;
		HAL_GPIO_WritePin(Motor2A_GPIO_Port, Motor2A_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Motor2B_GPIO_Port, Motor2B_Pin,GPIO_PIN_RESET);
	}
//----------------PWM 3	
	if(pwm3>0){
	htim1.Instance->CCR1=pwm3;
		HAL_GPIO_WritePin(Motor3A_GPIO_Port, Motor3A_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(Motor3B_GPIO_Port, Motor3B_Pin,GPIO_PIN_RESET);
	}
	else if(pwm3<0){
	htim1.Instance->CCR1=-pwm3;
		HAL_GPIO_WritePin(Motor3A_GPIO_Port, Motor3A_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Motor3B_GPIO_Port, Motor3B_Pin,GPIO_PIN_SET);
	}
	else if(pwm3==0){
	htim1.Instance->CCR1=pwm3;
		HAL_GPIO_WritePin(Motor3A_GPIO_Port, Motor3A_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Motor3B_GPIO_Port, Motor3B_Pin,GPIO_PIN_RESET);
	}
//----------------PWM 4	
	if(pwm4>0){
	htim1.Instance->CCR2=pwm4;
		HAL_GPIO_WritePin(Motor4A_GPIO_Port, Motor4A_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(Motor4B_GPIO_Port, Motor4B_Pin,GPIO_PIN_RESET);
	}
	else if(pwm4<0){
	htim1.Instance->CCR2=-pwm4;
		HAL_GPIO_WritePin(Motor4A_GPIO_Port, Motor4A_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Motor4B_GPIO_Port, Motor4B_Pin,GPIO_PIN_SET);
	}
	else if(pwm4==0){
	htim1.Instance->CCR2=pwm4;
		HAL_GPIO_WritePin(Motor4A_GPIO_Port, Motor4A_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Motor4B_GPIO_Port, Motor4B_Pin,GPIO_PIN_RESET);
	}	
}

void grip_motor(int pwm5){
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); 	//pwm5
	
//-----------------------PWM 5--------------------------
		if(pwm5>0){
		htim1.Instance->CCR3=pwm5;
			HAL_GPIO_WritePin(Motor5A_GPIO_Port,Motor5A_Pin,GPIO_PIN_SET);
			HAL_GPIO_WritePin(Motor5B_GPIO_Port,Motor5B_Pin,GPIO_PIN_RESET);
		}
		else if(pwm5<0){
		htim1.Instance->CCR3=-pwm5;
			HAL_GPIO_WritePin(Motor5A_GPIO_Port,Motor5A_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Motor5B_GPIO_Port,Motor5B_Pin,GPIO_PIN_SET);
		}
		else if (pwm5==0){
		htim1.Instance->CCR3=pwm5;
			HAL_GPIO_WritePin(Motor5A_GPIO_Port,Motor5A_Pin,GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Motor5B_GPIO_Port,Motor5B_Pin,GPIO_PIN_RESET);
		}
}

//--------------Rumus Derajat----------
void set_sudut(int sudut, int nilai_pengali, int vthe){  
//1775
		sudut = sudut;
		coss=sudut;//input cos
    degcos=(coss/57.325f);
    hasil_cos=cos(degcos);
    sinn=sudut;//input sin
    degsin=(sinn/57.325f);
    hasil_sin=sin(degsin);
    akar=3;//input akar
    hasil_akar=sqrt(akar); 
    //-----------------------------------
    jarijari=9;        //jari jari robot
    //----------------------------------- 
    data1=(-0.3333f*hasil_cos);
		dataset=(((1/hasil_akar)*hasil_sin));	
	
    data2=(data1+dataset);
    v1=(data2*nilai_pengali);
    syarat1=(v1+((jarijari/3)*vthe));
		kecepatan_motor1=((syarat1/1024)*1024); 
    //----
    data3=(-0.3333f*hasil_cos); 
		dataset1=(((1/hasil_akar)*hasil_sin));
		
    data4=(data3-dataset1); 
    v2=(data4*nilai_pengali);
    syarat2=(v2+((jarijari/3)*vthe));
		kecepatan_motor2=((syarat2/1024)*1024);    
    //----- 
    data5=(-0.3333f*hasil_cos); 
		dataset2=(((1/hasil_akar)*hasil_sin));
		
    data6=(data5+dataset2); 
    v3=(data6*nilai_pengali);              
    syarat3=(v3+((jarijari/3)*(-vthe)));
		kecepatan_motor3=-((syarat3/1024)*1024);  
		//------
		data7=(-0.3333f*hasil_cos); 
		dataset3=(((1/hasil_akar)*hasil_sin));
		
		data8=(data7-dataset3);
		v4=(data8*nilai_pengali);
		syarat4=(v4+((jarijari/3)*(-vthe)));
		kecepatan_motor4=-((syarat4/1024)*1024); 
    //------------------------------------ 
	
		drive_motor(kecepatan_motor1,kecepatan_motor2,kecepatan_motor3,kecepatan_motor4);
}


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
    
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
		drive_motor(0,0,0,0);
		x=0;
		ambilkoin = 0;
		segitiga = 0; bulat = 0; silang = 0; kotak = 0;
		atas = 0; kanan = 0; kiri = 0; bawah = 0;
		L1 = 0; L2 = 0;
		R1 = 0; R2 = 0;
		start = 0; select = 0;
		Lnaik = 0; Lturun = 0; Lkanan = 0; Lkiri = 0; Lnkanan = 0; Lnkiri = 0; Ltkanan = 0; Ltkiri = 0;
		Rnaik = 0; Rturun = 0; Rkanan = 0; Rkiri = 0; Rnkanan = 0; Rnkiri = 0; Rtkanan = 0; Rtkiri = 0;
		

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		
		//baca_stickps4();
		baca_stick();
		
		
//InitLimitSwitch
//    limitsw = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10);	
		
		   if(R1==1){
		    drive_motor(PWMRotasi,PWMRotasi,PWMRotasi,PWMRotasi); 
			//drive_motor(150,150,150,150); //24V
				grip_motor(0);
			}
			else if(L1==1){
		    drive_motor(-PWMRotasi,-PWMRotasi,-PWMRotasi,-PWMRotasi);
			//drive_motor(-150,-150,-150,-150); //24v
				grip_motor(0);	
			}
 		
//--------Analog KIRI sama kaya Arrow-----------//	
		 else if(Lkanan==1){
		//drive_motor(500,400,-550,-400); 
	  drive_motor(PWManalog,PWManalog,-PWManalog,-PWManalog);
			grip_motor(0);			
		}
		else if(Lkiri==1){
		drive_motor(-PWManalog,-PWManalog,PWManalog,PWManalog);
    //drive_motor(-250,-200,275,200);			
			grip_motor(0);
		}
	  else if(Ltkanan==1){
			drive_motor(0,PWManalog,0,-PWManalog);
			grip_motor(0);
		}
	  else if(Ltkiri==1){
			drive_motor(-PWManalog,0,PWManalog,0);
			grip_motor(0);
		}
    else if(Lnkanan==1){
	    drive_motor(PWManalog,0,-PWManalog,0); 
			grip_motor(0);
		}
    else if(Lnkiri==1){
	    drive_motor(0,-PWManalog,0,PWManalog); 
			grip_motor(0);
		}
		else if(Lturun==1){
			drive_motor(-PWManalog,PWManalog,PWManalog,-PWManalog);
			grip_motor(0);
		}
		else if(Lnaik==1){
	    drive_motor(PWManalog,-PWManalog,-PWManalog,PWManalog); 
			grip_motor(0);
		}

						
//-----------------BERHENTI-------------				
		else{
			drive_motor(0,0,0,0);
			grip_motor(0);
//			nosmaju = 0;
//			nosmundur = 0;
			x=0;
			segitiga = 0; bulat = 0; silang = 0; kotak = 0;
			atas = 0; kanan = 0; kiri = 0; bawah = 0;
			L1 = 0; L2 = 0;
			R1 = 0; R2 = 0;
			start = 0; select = 0; touch = 0;
			Lnaik = 0; Lturun = 0; Lkanan = 0; Lkiri = 0; Lnkanan = 0; Lnkiri = 0; Ltkanan = 0; Ltkiri = 0;
			Rnaik = 0; Rturun = 0; Rkanan = 0; Rkiri = 0; Rnkanan = 0; Rnkiri = 0; Rtkanan = 0; Rtkiri = 0;
		}		
		
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 80;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1024;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 40;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1024;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor1B_GPIO_Port, Motor1B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor2B_Pin|Motor1A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor2A_Pin|Motor3B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Motor3A_Pin|Motor4A_Pin|Motor4B_Pin|Motor5A_Pin
                          |Motor5B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Motor1B_Pin */
  GPIO_InitStruct.Pin = Motor1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Motor1B_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Motor2B_Pin Motor1A_Pin */
  GPIO_InitStruct.Pin = Motor2B_Pin|Motor1A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : Motor2A_Pin Motor3B_Pin */
  GPIO_InitStruct.Pin = Motor2A_Pin|Motor3B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : Motor3A_Pin Motor4A_Pin Motor4B_Pin Motor5A_Pin
                           Motor5B_Pin */
  GPIO_InitStruct.Pin = Motor3A_Pin|Motor4A_Pin|Motor4B_Pin|Motor5A_Pin
                          |Motor5B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
